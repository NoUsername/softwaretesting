buildscript {
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE")
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
    }
}

buildscript {
    repositories {
        jcenter()
        maven {
            url "http://repo.spring.io/snapshot"
        }
        maven {
            url "http://repo.spring.io/milestone"
        }
    }
}
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.junit.platform.gradle.plugin'

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

configurations {
    // force jar name to always be the same (basically just to keep build simple)
    jar.archiveName = 'testing.jar'
}

dependencies {
    //compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("com.h2database:h2")
    compile("mysql:mysql-connector-java:5.1.6")
    compile("mysql:mysql-connector-java:5.1.6")
    compile("com.squareup.okhttp3:okhttp:3.9.0")
    compile("commons-io:commons-io:2.6")
    compile("org.apache.commons:commons-lang3:3.6")

    compile("org.springframework.boot:spring-boot-devtools")

    testCompile("junit:junit:4.12")
    // support junit4 tests in new runner
    testRuntime("org.junit.vintage:junit-vintage-engine:4.12.2")
    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.2")
    // partial support for using junit4 rules in junit5
    testCompile("org.junit.jupiter:junit-jupiter-migrationsupport:5.0.2")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.2")
    testRuntime("org.junit.jupiter:junit-jupiter-params:5.0.2")
    testRuntime("org.junit.platform:junit-platform-console:1.0.2")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("com.github.sbrannen:spring-test-junit5:1.0.2")
    testCompile("org.seleniumhq.selenium:selenium-java:3.7.1")
    testCompile("com.google.guava:guava:19.0")
    testCompile("com.palantir.docker.compose:docker-compose-rule-junit4:0.33.0")
}

repositories {
    jcenter()
    maven {
        url 'http://repo.spring.io/snapshot'
    }
    maven {
        // docker compose rule
        url 'https://dl.bintray.com/palantir/releases'
    }
    maven {
        // spring-test-junit5
        url 'https://jitpack.io'
    }
}

junitPlatform {
    enableStandardTestTask true
    filters {
        tags {
            include 'fast'
        }
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/generated-resources'
        }
    }
}

ext.generatedSourcesDir = "./src/main/generated-resources/"

// NOTE: quite hacky approach, multiple issues:
// * hard to configure
// * needs  testRuntime("org.junit.platform:junit-platform-console:1.0.2")
// * does not generate nice html report from junit xml as normal gradle testruns do
// * does not run all tests for some reason?! (PrinterServiceTest2 is not run)
task slowTests(
        type: JavaExec,
        group: 'Verification'
) {
    dependsOn testClasses

    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        environment "DOCKER_COMPOSE_LOCATION", "C:\\Program Files\\Docker\\Docker\\resources\\bin\\docker-compose.exe"
        environment "DOCKER_LOCATION", "C:\\Program Files\\Docker\\Docker\\resources\\bin\\docker.exe"
    }

    classpath = sourceSets.test.runtimeClasspath

    main = 'org.junit.platform.console.ConsoleLauncher'
    args = ['--scan-class-path',
            sourceSets.test.output.getClassesDirs().asPath,
            '--reports-dir', "${buildDir}/test-results/slowTests",
            '--include-tag', 'slow',
            '--include-tag', 'medium',
    ]
}

task endToEndTests2(
        type: JavaExec,
        group: 'Verification'
) {
    dependsOn testClasses

    String testingUrl = System.properties.containsKey('TESTING_URL')
    if (testingUrl) {
        systemProperty 'TESTING_URL', testingUrl
    }

    classpath = sourceSets.test.runtimeClasspath

    main = 'org.junit.platform.console.ConsoleLauncher'
    args = ['--scan-class-path',
            sourceSets.test.output.getClassesDirs().asPath,
            '--reports-dir', "${buildDir}/test-results/endToEndTests",
            '--include-tag', 'endToEnd'
    ]
}


// quick hacks to not need any gradle node plugins
task('npmInstall', type: Exec) {
    inputs.file project.file("./package.json")
    outputs.file project.file("./package.json")
    String command = "npm"
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        command += ".cmd"
    }
    executable = command
    args = ["install"]
}

task('npmCompile', type: Exec, dependsOn: 'npmInstall') {
    inputs.dir project.file("./src/main/js/")
    outputs.dir project.file(project.generatedSourcesDir)

    String command = "npm"
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        command += ".cmd"
    }
    executable = command
    args = ["run", "build"]
}

clean {
    doLast {
        // also clean generated resources
        project.file(project.generatedSourcesDir).deleteDir()
        project.file(project.generatedSourcesDir).mkdirs()
    }
}

compileJava.dependsOn npmCompile