buildscript {
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE")
    }
}

buildscript {
    repositories {
        jcenter()
        maven {
            url "http://repo.spring.io/snapshot"
        }
        maven {
            url "http://repo.spring.io/milestone"
        }
    }
}
apply plugin: 'java'
apply plugin: 'org.springframework.boot'

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

configurations {
    // force jar name to always be the same (basically just to keep build simple)
    jar.archiveName = 'testing.jar'
}

dependencies {
    //compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("com.h2database:h2")
    compile("mysql:mysql-connector-java:5.1.6")
    compile("mysql:mysql-connector-java:5.1.6")
    compile("com.squareup.okhttp3:okhttp:3.9.0")
    compile("commons-io:commons-io:2.6")
    compile("org.apache.commons:commons-lang3:3.6")

    compile("org.springframework.boot:spring-boot-devtools")

    testCompile("junit:junit:4.12")
    testCompile("pl.pragmatists:JUnitParams:1.1.1")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.seleniumhq.selenium:selenium-java:3.7.1")
    testCompile("com.google.guava:guava:19.0")
    testCompile("com.palantir.docker.compose:docker-compose-rule-junit4:0.33.0")
}
repositories {
    jcenter()
    maven {
        url 'http://repo.spring.io/snapshot'
    }
    maven {
        // docker compose rule
        url 'https://dl.bintray.com/palantir/releases'
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/generated-resources'
        }
    }
}

ext.generatedSourcesDir = "./src/main/generated-resources/"

test {
    useJUnit {
        includeCategories 'at.paukl.testing.Fast'
    }
}

task('slowTests', type: Test) {
    // always runnable by task - skips up-to-date check
    outputs.upToDateWhen {false}
    // some setup required for our docker rule
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        environment "DOCKER_COMPOSE_LOCATION", "C:\\Program Files\\Docker\\Docker\\resources\\bin\\docker-compose.exe"
        environment "DOCKER_LOCATION", "C:\\Program Files\\Docker\\Docker\\resources\\bin\\docker.exe"
    }
    useJUnit {
        includeCategories = [
                'at.paukl.testing.Medium',
                'at.paukl.testing.Slow'
                ]
    }
}

task('endToEndTests', type: Test) {
    // always runnable by task - skips up-to-date check
    outputs.upToDateWhen {false}
    String testingUrl = System.properties.containsKey('TESTING_URL')
    if (testingUrl) {
        systemProperty 'TESTING_URL', testingUrl
    }
    useJUnit {
        includeCategories 'at.paukl.testing.EndToEnd'
    }
}


// quick hacks to not need any gradle node plugins
task('npmInstall', type: Exec) {
    inputs.file project.file("./package.json")
    outputs.file project.file("./package.json")
    String command = "npm"
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        command += ".cmd"
    }
    executable = command
    args = ["install"]
}

task('npmCompile', type: Exec, dependsOn: 'npmInstall') {
    inputs.dir project.file("./src/main/js/")
    outputs.dir project.file(project.generatedSourcesDir)

    String command = "npm"
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        command += ".cmd"
    }
    executable = command
    args = ["run", "build"]
}

clean {
    doLast {
        // also clean generated resources
        project.file(project.generatedSourcesDir).deleteDir()
        project.file(project.generatedSourcesDir).mkdirs()
    }
}

compileJava.dependsOn npmCompile